#CATEGORY "46" "Bens Modules" // Custom

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII

#Help_BEGIN
Essentially works like an OR-->Toggle-->MOS-->Buffer.


-Simple toggle with extra set/reset inputs and both pulsed and latching outputs. The outputs are jammable.

-Last input pressed (set, reset, or clock) dictates the state of the toggle.
-Pulse outputs reset on the rising edge of any input. E.g. if the toggle goes to 'set' state when a set input goes high, 
	both Pulse outputs go low, and Out_Pulse is pulsed again pulsed for the full length of TimeinTicks (or until another input is propagated).
#Help_END

DIGITAL_INPUT 		_SKIP_, Clock, bSet[3], bReset[3,3];
DIGITAL_OUTPUT		_SKIP_, _SKIP_, Out, $Out, _SKIP_, Out_Pulse, $Out_Pulse;

INTEGER_PARAMETER	Time_in_Ticks;

#BEGIN_PARAMETER_PROPERTIES Time_in_Ticks
propValidUnits 		= unitTicks;
propDefaultUnit 	= unitTicks;
propDefaultValue 	= 5t;
#END_PARAMETER_PROPERTIES

INTEGER S, T;

//

PUSH bSet
{
	if(S = 0)
	{
		Out_Pulse = 0;
		$Out_Pulse = 0;
	
		$Out = 0;
		Out = 1;
		Pulse (T, Out_Pulse);
	
		S = 1;
	}
}

PUSH bReset
{
	if(S = 1)
	{	
		Out_Pulse = 0;
		$Out_Pulse = 0;
	
		Out = 0;
	    $Out = 1;
		Pulse (T, $Out_Pulse);
	
		S = 0;
	}
}

PUSH Clock
{
	Out_Pulse = 0;
	$Out_Pulse = 0;

	If (S)
	{
    	Out = 0;
		$Out = 1;
		Pulse (T, $Out_Pulse);    	
 		S = 0;
	}
	Else If (S = 0)
	{
		$Out = 0;
		Out = 1;
		Pulse (T, Out_Pulse);
    	S = 1;
	}
}

Function Main()
{
	T = Time_in_Ticks;
    $Out = 1;
	S = 0;

}

