#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT	ciMaxIndex 			400  
#DEFINE_CONSTANT	ciMaxColumns		2                         

#HELP_BEGIN
This module is for controlling large subpage reference lists.
Provides button FB, item vis FB, an analog FB for switching modal icons, and 4 groups of text outputs.
                         
This should all really be redone in C#. 
                          
Rx strings will appear as such:
"{ListButtonFB:24=0,1=1,2=1,;}"
"{ListVisFB:2=1,19=0,20=0,;}"
"{ListIconFB:3=55,9=23948,1=0,2=0,;}"
"{ListTextFB:25=thisText,thisOtherText,|4=thatOtherText,myOtherText,|;}"
       

#HELP_END     


BUFFER_INPUT	_SKIP_,
				_SKIP_,
				_SKIP_,
				Rx$[30000];

DIGITAL_OUTPUT	_SKIP_, 
				_SKIP_, 
				_SKIP_, 
				Vis[ciMaxIndex],
				FB[ciMaxIndex];

                  
STRING_OUTPUT	Tx$1[ciMaxIndex];

INTEGER_PARAMETER	HighIndex,
					TextColumns;

STRING_PARAMETER	HTMLData[300];
					        

          
STRUCTURE stHTML {
				INTEGER iBold;
				STRING	sColor[7];
				INTEGER iSize;

				};
stHTML HTML[ciMaxColumns];


INTEGER iColumns,
		iVis[ciMaxIndex],
		iFB[ciMaxIndex];

STRING 	sTrash[1000];
                   
STRING_FUNCTION fGetBoldClose(INTEGER iBold)
{
	if(iBold)	return("</b>");
	return("");
}
STRING_FUNCTION fGetBold(INTEGER iBold)
{
	if(iBold)	return("<b>");
	return("");
}

STRING_FUNCTION fHTML(STRING sText, INTEGER iColumn)
{
    STRING sTemp[1000];
    
	if(len(sText))
	{
		makestring(sTemp, "%s", fGetBold(HTML[iColumn].iBold));
		makestring(sTemp, "%s<font size=\x22%u\x22", sTemp, HTML[iColumn].iSize);
		makestring(sTemp, "%s color=\x22%s\x22>%s", sTemp, HTML[iColumn].sColor, sText);
		makestring(sTemp, "%s</font>%s", sTemp, fGetBoldClose(HTML[iColumn].iBold));
    }
	return(sTemp);	
}

FUNCTION fProcessText(INTEGER iIndex, STRING sTemp1, STRING sTemp2)
{
   	switch(iColumns)
	{
		case(1):	Tx$1[iIndex] = fHTML(sTemp1, 1);
		case(2):	Tx$1[iIndex] = fHTML(sTemp1, 1) + "\x0d" + fHTML(sTemp2, 2);
	}
}    

INTEGER_FUNCTION fProcess(STRING sDataProcess)
{
	INTEGER i, j, iIndex, iState;
    STRING	sTemp[100], sTemp2[100], sData[1000], sDataOriginal[2000], sText[2][150];
             
	sDataOriginal = sDataProcess;
	while(find(";", sDataOriginal))
	{
		sData = remove(";", sDataOriginal);
		sTemp = remove(":", sData);

		if(find("*^", sData))
		{
			if(findnocase("ListButtonFB", sTemp))
			{

		 		sTemp = remove("=", sData);
				iState = atoi(sData);
				
				if(atoi(sTemp))	i = atoi(sTemp);
				else			i = ciMaxIndex;
				for(iIndex = 1 to i)
				{
                   	iFB[iIndex] = iState;
					FB[iIndex] = iState; 
				}								
			}
			else if(findnocase("ListVisFB", sTemp))
			{
		 		sTemp = remove("=", sData);
				iState = atoi(sData);
				
				if(atoi(sTemp))	i = atoi(sTemp);
				else			i = ciMaxIndex;
				for(iIndex = 1 to i)
				{
                   	iVis[iIndex] = iState;
					Vis[iIndex] = iState; 
				}	
			}
		}
		
		else
		{
			if(findnocase("ListButtonFB", sTemp))
			{
		 		while(find(",", sData))
				{
		      		sTemp = remove("=", sData);
					i = atoi(sTemp);
					if(i)
					{
						iFB[i] = atoi(sData);
						FB[i] = iFB[i];
					}
					sTrash = remove(",", sData);  	
				}   	
			}
			else if(findnocase("ListVisFB", sTemp))
			{
		    	while(find(",", sData))
				{
		      		sTemp = remove("=", sData);
					i = atoi(sTemp);
					if(i)
					{
						iVis[i] = atoi(sData);
						Vis[i] = iVis[i];
					}
					sTrash = remove(",", sData);
		   		}
			}
			else if(findnocase("ListTextFB", sTemp))
			{
		    	while(find("|", sData))
				{
					sTemp = remove("|", sData);						//here, the pipe delimits each item
					sTemp2 = remove("=", sTemp);				//remove the index and the = from the item data
					i = atoi(sTemp2);						//get the index of the item to update
	
					if(i)								//if we got an index from the item data (this is error handling, but its not bulletproof)
					{
						j = 1;
						while(find(",", sTemp) && j <= TextColumns)						//"," delimits each text column, TextColumns
						{
				        	sText[j] = left(sTemp, find(",", sTemp) - 1);
							sTrash = remove(",", sTemp);
							j = j + 1;								//count, up to 4
						}
						fProcessText(i, sText[1], sText[2]);
	
						i = 0;
					}
				}
			}
		}
	}
}
      
THREADSAFE CHANGE Rx$					
{
	while(1)
	{
		fProcess(gather("}", Rx$));
	}
}




FUNCTION main()
{
	INTEGER i;
	STRING sTemp[100], sHTML[1000];
	waitforinitializationcomplete();	

	/*
	for(i = 1 to ciMaxIndex)
	{
    	iVis[i] = 1;
		Vis[i] = 1;
	}
    */

	iColumns = TextColumns;
     

	for(i = 1 to ciMaxColumns)
	{
    	HTML[i].iBold = 0;
		HTML[i].iSize = 14;
		HTML[i].sColor = "#ffffff";
	}

	if(len(HTMLData))
	{
    	sHTML = HTMLData;
		while(find(";", sHTML))
		{
        	sTemp = remove(";", sHTML);
			i = atoi(sTemp);					//get the column number
			sTrash = remove("=", sTemp);
			if(findnocase("bold", sTemp))			HTML[i].iBold = 1;
			if(atoi(sTemp))							HTML[i].iSize = atoi(sTemp);
				 if(findnocase("white", sTemp))		HTML[i].sColor = "#ffffff";
			else if(findnocase("red", sTemp))		HTML[i].sColor = "#ff0000";
			else if(findnocase("green", sTemp))		HTML[i].sColor = "#00ff00";
			else if(findnocase("blue", sTemp))		HTML[i].sColor = "#0000ff";
			else if(findnocase("orange", sTemp))	HTML[i].sColor = "#ffbb00";
			else if(findnocase("yellow", sTemp))	HTML[i].sColor = "#ffff00";
			else if(findnocase("black", sTemp))		HTML[i].sColor = "#000000";
			else if(findnocase("purple", sTemp))	HTML[i].sColor = "#ff00ff";
			else if(findnocase("bluegreen", sTemp))	HTML[i].sColor = "#00ffff";
			else if(findnocase("skyblue", sTemp))	HTML[i].sColor = "#8888ff";

		}
	}
}





