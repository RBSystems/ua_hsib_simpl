Level 3 Audiovisual

Ben Campagnola

Project 3392
Univ of Arizona, HSIB
Tucson, AZ


CODE MANUAL
	
	Overview

		Crestron Processors
			The system contains 6 Crestron processors: 2x Pro3  (device IDs CP-01 & CP-02)  and   4x CP3  (CP-03 thru CP-06). 
			All processors have SD cards as of time of writing.
			
			CP-01 
				- holds the 'master' program, composed in SIMPL Windows and SIMPL+. 
				- there are no S# modules in this program. Why was it written SIMPL Windows? The world may never know.
				- the removable media on this processor holds several text files (.txt) that contain nearly all of the data that corresponds to the system equipment and configuration as it relates to the Crestron system.
					- using these files,  
			CP-02 
				- is unused at the time of writing (spare processor).
			CP-03
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 81
				- generally responsible for controlling the Evertz video system
			CP-04
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 82
				- generally responsible for controlling the QSC DSP system
			CP-05
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 83
				- generally responsible for controlling all cameras, and all displays in the building
			CP-06
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 84
				- generally responsible for controlling the system devices not listed in the above processors

			RS-232 and relays are used on various processors, so the EISCs will sometimes carry this data from CP-01 to CP[03-06]

	Hardware

		Partition Sensors
			7x GLS-PART-CN
				One for each pair of combine rooms.
				CN-ID 20;	305/306;	TSID=F041AC89; 	SN=138521737
				CN-ID 21;	320/321;  	TSID=F05DACF8; 	SN=140356856
				CN-ID 22;	322/323;	TSID=F03F618A; 	SN=138371466
				CN-ID 23;	422/423; 	TSID=F05CAC88; 	SN=140291208
				CN-ID 24;	424/425; 	TSID=F05BAF40; 	SN=140226368
				CN-ID 25;	531/532; 	TSID=F037A922; 	SN=137865506
				CN-ID 26;	640/642;	TSID=F0216B6B; 	SN=136407915


	Issues Encountered

		*Fixed - CP-01 hangs on program load, RAM overload
			Generated errors relating to memory, as well as having to do with specific modules in the program.
			As it turns out, the modules mentioned in the error log were irrelevant. These modules were simply the last that the program tried to load before it hung.
			Issue was in code, where modules were given join name "1" in order to indicate a fixed boolean preference. (e.g. Use_Prefix_Indexing on the List modules)
			Using "1" on a digital input will cause that module to load in the 1st logic solution. 
			Too many instances using "1", and the program will max out the memory allocation, attempting to fit it all into the 1st wave. 
			Fixed by declaring join names for each of these bool preferences, and then attaching the joins to a stepper.

		*Resolved, ongoing - Default IP Table on CP-01
			Def IP Table generated by compiling the SIMPL Windows program does not hash the same as the IP table that is reported by the processor, even after loading the default IP table to the processor. 
			Result is that CP-01 will report "Default IP Table has changed" when loading the program from Toolbox, and will thus ask if it should load the Def IP Table.
			Either way (sending default IP table or not), it is fine. All IP addresses and ports specific to CP-01 will populate as needed to run the program.
			No concern of over-writing anything here.

		*Fixed/patched, not optimally - Processor Disconnect/Reconnect Issue
			On startup, the data lists are read into the Pro3 program, which in turn distributes the data to various places, including the 4x EISCs pointing to the CP3 processors. When the processors disconnect (appear as offline for whatever reason) it is possible that a program or hardware reset took place, thus it is necessary that the Pro3 re-initialize all of the data points across the EISCs that lost connection.
			Two different issues here:
				1. I previously had MSP symbols on all of the EISC data strings so that at any time I could check the strings in debugger to be sure that the proper data has been sent to a CP3 (e.g. use case, if a display is not responding to commands, i can easily check the data to be sure I'm sending the right stuff). The MSPs would also force the strings to update on EISC socket reconnect. The issue here is that for some processors, that would be the equivalent of updating about 1000 config strings simultaneously, as well as instantiating any objects and running config operations that would be associated with each string. Obv, this taps the thread pool and causes all sorts of failures.
				2. I'm of the thought that if a program can break, the fix to that issue should be made in that program. E.g., if the CP3 processors are getting overdrawn, then a fix should be in the CP3s. However, a few things about the way the C# program was originally constructed makes this very difficult and would require a substantial portion of the program to be rewritten, so I patched the issue in the Pro3. Now on socket reconnect, a module that stores all of the outgoing EISC data is retriggered, with a timed stepper that throttles the thread and RAM requirements on the CP3 side. Thus, the CP3 is still vunerable to the overload issue, I've just ensured that the Pro3 doesn't send data too fast. Not optimal, but it works for now.

		



