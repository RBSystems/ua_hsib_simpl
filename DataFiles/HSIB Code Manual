Level 3 Audiovisual

Ben Campagnola

Project 3392
Univ of Arizona, HSIB
Tucson, AZ


CODE MANUAL
	Foreword by the Author:
		
		1. Fuck this program.
		
		2. Any time you see  <  or  >  brackets in this document, consider the code or data inside the brackets as though the brackets were not there.
			e.g.  
			<  findnocase("data", sTemp)  >
			indicates that you would see the following in code:
			findnocase("data", sTemp)

			If you see one but not the other, it probably means I'm trying to indicate a less-than/greater-than condition. Probably.

		3. Nonspecific integers are indicated using "n"
			e.g.  v1.n.nn

		4. If you see <bin> in this document, this just means optionally <1> or <0> to indicate a boolean value in S+

	
	Overview

		Crestron Processors
			The system contains 6 Crestron processors: 2x Pro3  (device IDs CP-01 & CP-02)  and   4x CP3  (CP-03 thru CP-06). 
			All processors have SD cards as of time of writing.
			
			CP-01 
				- holds the 'master' program, "Global", composed in SIMPL Windows, SIMPL+, and SIMPL#. 
				- Why was it written SIMPL Windows? The world may never come to know.
				- the removable media on this processor holds several .txt files (referred to as "Data Files" in this document) that contain nearly all of the data that corresponds to the system equipment and configuration as it relates to the Crestron system.
					- using these files, the system data all starts at a single origin. 
					- adding or modifying room specific data, audio and video data, sources and destinations, dsp control points, "filter" data found on the BioComm panel, etc all needs to be added to these lists
			CP-02 
				- holds the frontend program, "Front", composed in SIMPL Windows, SIMPL+, and SIMPL#.
				- contains all but 5 of the classroom logic folders
				- communicates only with CP-01 "Global" via EISC
			CP-03
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 83
				- generally responsible for controlling the Evertz video system
			CP-04
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 84
				- generally responsible for controlling the QSC DSP system
				- while the rest of the program generally operates on GUIDs, the MTRX_ADST section (the arrays controlling the audio matrix) work based on the actual DSP audio matrix IO numbers. The list of data is stored in GUIDs, however the analog 			values sent to this CP3 to control matrix crosspoints use the actual command data.
			CP-05
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 85
				- generally responsible for controlling all cameras, and all displays in the building
			CP-06
				- dedicated to device control, written in SIMPL# Pro
				- connects to CP-01 via EISC, IPID 86
				- generally responsible for controlling the system devices not listed in the above processors



		Code

			Data Lists
				
				ALL list data is provided in Key=Value notation.				
				A comma "," needs to follow ALL KV pairs, including the last one in the line. (I think I accounted for misses in code, but do it anyway, because you rock! <3 smooches )
				Any time we have a string value, the string will be parsed from "=" to "," with whitespace trimmed from each end.      e.g.  <  my_freaking_name= Ben Campagnola  ,  >  will return the string "Ben Campagnola". You're welcome.
				
				Blank lines are skipped and do not increment the auto-GUID counter.
				Per line, if "//" is found in the data, everything to the right of the "//" inclusive is discarded.

				SIMPL+ does all the parsing. *see issue in the Issues section below
				The data is sent to the EISCs as arrays (so that each live data line can be viewed in debugger, in case something is not working).
				The data is also sent to the Global modules which store and process the global data, and then repackage the data and send only the valid and appropriate info to each room.

				These are all of the Data Lists, including each KV pair, notes, and the required location on the CP-01 processor:
				- /RM/HSIB_Rooms.txt				Room-specific data. One line = one room. 
													*note: this array is fixed! If you add a room, you need to manually give it a GUID that does not exceed 30 (inclusive). 
					- room_guid=nn
					- room_name=string 					
					- bldg_rm_num=nnn   				e.g.  < bldg_rm_num=305 >  for Classroom 305, or  < bldg_rm_num=222 >  for the Forum
					- discrete_macro_mode=<bin>			this is enabled <1> when a system employs a 1-button press for vid matrix routing, usually found in rooms that have one or two columns of sources on the main media routing page. 
														if <0> (false), then the room will expect a 2-button routing scheme, e.g. select source Laptop, then select a destination LCD
					- macro_take_mode=<bin>				if this is enabled <1>, the room will wait for a press of a "take" button before making the video route (3-button routing)
														*note: ALL matrix routing tables found in the Admin pages of the Classroom panels are 3-button routing. these last two KV pairs apply to the media routing / macro controls on the Main page. 
					- use_src_list_mode=<bin>			in a limited number of rooms (maybe just S.17 SimDeck?) the source list found in the Admin page routing controls is copied to the Main page media routing / macro controls.
														enabling this feature causes the Admin source list to set the macro source selection (where in the other rooms, each source has its own button) 

				- /RM/HSIB_MTRX_VSRC.txt			All video sources in the building on the Evertz network. One line = one source.
													*note: each line of the MTRX_VSRC and MTRX_VDST lists were subdivided into 3 sections to make parsing more efficient.
													*note: these subdivisions are NOT comma delimited. S+ parses by chunking from start-of-line to each "]"
													*note: the KV pairs are still comma delimited inside the subdivisions, with a comma after the last KV pair in each subdivision
					e.g.
					<  sys_data[ local_name=Wide Camera, room_ass=02, local_id=20, filter=(9),]  device_data[ is_camera=1, ip_address=10.156.26.53, ]  io_data[ cmd_io=103, ]  >


					- sys_data[ ]		(subdivision)
						- local_name=string 			this is the name that will appear in the Admin routing pages in an uncombined room. it is concatenated with the < bldg_rm_num > to create the "global" name
														e.g. "Laptop" in room 305 is "305 Laptop" in the Global matrix routing lists, as well as when 305 (or any combine room) is in a combined state			
						- pgm_audio=nn 					this is the index of the source in the program audio routers in each room page in the DSP
														*note: due to crummy firmware design in the QSC DSP, we needed to make 2 routers that operate as 1. 
														*note: pgm_audio=[1-4] will trigger input 1-4 on the first router, while pgm_audio=[5-8] will trigger 1-4 on the 2nd router. This logic happens in the CP-04 processor (CP3)
														*note: in code, commanding a value of zero (0) to the pgm_audio route will select input 5 on both PGM audio routers, and input 5 is intentionally left unconnected. 
						- room_ass=nn 					the room GUID that this source is associated with.  e.g.  <  room_ass=5  >   will link the source with room S.05 (Classroom 322)
														*note: some sources do not have a room association. this means the source will only show up in the global lists
						- local_id=nn 					common nomenclature ("local") refers to room-specific info. the local_id is the
						- filter=(nn[,nn,nn])			the filter number or numbers that a source or destination applies to (filters are applied to the global lists on the BioComm panel)
					- device_data[ ]  	(subdivision)
						- cmd_io=string 	
					- io_data[ ] 		(subdivision)  





			Nomenclature and Fixed Data
				In the program, almost everything is arrayed by global index ("GUIDs" / global unique identifiers).
				ALL modules, when communicating commands and feedback, will talk in GUID terms unless explicitly identified differently.	e.g. when a room wants to route a source to dst, it sends the GUID of the source and dst to the Global module. 
				Most data arrays are given an arbitrary GUID by the "Data_Initializer" modules during the boot sequence, based on the order that the lines are read in (top to bottom). 
				GUID has zero impact on functional behavior. e.g. a room could have 3 cameras listed as video sources, with GUIDs of 9, 353, and 112.  
				A few of the arrays, such as the list of rooms, are fixed numerical indices. Anything with a fixed GUID is cross referenced by data in other lists, so the association is broken / indirect, and thus requires one of the lists to be non-dynamic. Yes, considered doing a hostname sort of system. No, didn't implement it. Why? Because you suck, that's why. 

				Common terms found in the code and debugger:
					- "RC": Room Combine 					e.g.  <  Sys.iRCState  >  is an integer (bool) that tracks the state of the room combine configuration in a particular room (obv unused in solo rooms)
					- "local":	as in "local to a room" 	e.g.  in the MTRX_VSRC data list,  <  local_name=Laptop  >  indicates that the name of that source in the room is "Laptop", and will appear this way on touch panels
					- "global": as in "global control"		data that belongs in the global data arrays found in the GlobalMST and GlobalDSP modules. in global matrix lists, such as the MTRX_VSRC list, sources will appear WITH their respective room names
															e.g.  "305 Laptop"  so that we don't confuse a bunch of nonspecific "Laptop" sources found in the same list
					- "GUID": as in global unique ID 		everything is arrayed and tracked by GUID in the whole program, except for...
					- "local_id": list index in a room  	e.g. a video source with GUID 179 could have a local_id of 4, meaning that if we look at the Admin matrix routing page in the room's DGE panel, the source will appear as 4th in the 														list


			Files and Versions
				I stopped incrementing the SIMPL code at ~v1.0.53 and moved all code files over to GitHub instead. 			https://github.com/bcampy/ua_hsib_simpl.git
				Same with panels - stopped incrementing at about ~1.0.80 and moved to GitHub.								https://github.com/bcampy/ua_hsib_vtpro.git
				
				SIMPL Windows files:
					HSIB_Global_Pro3.lpz	- CP-01 (Pro3)
						- includes data management, global control modules, a few device connections, and all of the EISC connections to the CP3 processors
						- the major modules found in Global_Pro3 (all SIMPL+/SIMPL#):
							- L3_UA_HSIB_GlobalMST_v1.n.nn
								- does most of the heavy lifting in all aspects of the program - vid matrix routing, audio matrix routing, data parsing, control requests from rooms, EISCs to the Front Pro3 and the device CP3 units, etc
								- connects to all rooms' NodeMST modules
							- L3_UA_HSIB_GlobalDSP_v1.n.nn 
								- only handles DSP control points (gain, mute, and small PGM audio routers - but NOT the big audio matrix found on the BioComm panel)
								- connects to all rooms' NodeDSP modules
							- L3_UA_HSIB_NodeMST_v1.n.nn
								- same control aspects as GlobalMST, but each of these is specific to a single room only
							- L3_UA_HSIB_NodeDSP_v1.n.nn
								- same control aspects as GlobalDSP, but each of these is specific to a single room only
							- L3_DataInit_Driver_v1.0.01
								- controls the flow of the below modules that load the Data Lists
							- L3_Data_Initializer_v1.2.05
								- each of these modules loads a single file from the Data Lists
							- L3_Data_Initializer_MultipleFiles_v1.3.01
								- this is only used once in the program, and is specifically used to load the "MACROS" lists, where each room gets its own HSIB_MACROS_Snn.txt file
						- this program holds Qty.5 of the room logic folders as of Press Time - rooms S.01, S.02, S.16, S.17, S.23
							- 01 and 02 are in this file because it is easier and quicker to test room modifications if we only load the Global file
							- 16 and 17 are in this file because the connections between these rooms and the Global control modules are atypical
							- 23 is in this code because it is the Forum, and differs from the standard connections to the Global control modules
							- It's possible that the final code has corrected the discrepancies and moved these 5 rooms over to the other Pro3 (CP-02, HSIB_Front_Pro3.lpz), but don't count on it.

							- What does this mean to me!?
								- If you make a change to any Global modules or logic, just compile and send the Global program to CP-01.
								  However, if you make a change to Classroom/Forum logic (same S+ module), you need to recompile both the Global and Front programs, and send to CP-01 and CP-02 respectively.  

					HSIB_Front_Pro3.lpz		- CP-02 (Pro3)
						- holds the rest of the rooms that are not in CP-01
							- 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 18, 19
						- only uses the "Node" modules, as described in the Global_Pro3 program



	Hardware

		Partition Sensors
			7x GLS-PART-CN
				One for each pair of combine rooms.
				CN-ID 20;	305/306;	TSID=F041AC89; 	SN=138521737
				CN-ID 21;	320/321;  	TSID=F05DACF8; 	SN=140356856
				CN-ID 22;	322/323;	TSID=F03F618A; 	SN=138371466
				CN-ID 23;	422/423; 	TSID=F05CAC88; 	SN=140291208
				CN-ID 24;	424/425; 	TSID=F05BAF40; 	SN=140226368
				CN-ID 25;	531/532; 	TSID=F037A922; 	SN=137865506
				CN-ID 26;	640/642;	TSID=F0216B6B; 	SN=136407915

		DM-DGE-200-C Panels
			One in every room, including S.23 Forum (Rm 222), and S.00 BioComm (Rm 513A)



	Issues Encountered

		*Fixed - CP-01 hangs on program load, RAM overload
			Generated errors relating to memory, as well as having to do with specific modules in the program.
			As it turns out, the modules mentioned in the error log were irrelevant. These modules were simply the last that the program tried to load before it hung.
			Issue was in code, where modules were given join name "1" in order to indicate a fixed boolean preference. (e.g. Use_Prefix_Indexing on the List modules)
			Using "1" on a digital input will cause that module to load in the 1st logic solution. 
			Too many instances using "1", and the program will max out the memory allocation, attempting to fit it all into the 1st wave. 
			Fixed by declaring join names for each of these bool preferences, and then attaching the joins to a stepper.

		*Resolved, ongoing - Default IP Table on CP-01
			Def IP Table generated by compiling the SIMPL Windows program does not hash the same as the IP table that is reported by the processor, even after loading the default IP table to the processor. 
			Result is that CP-01 will report "Default IP Table has changed" when loading the program from Toolbox, and will thus ask if it should load the Def IP Table.
			Either way (sending default IP table or not), it is fine. All IP addresses and ports specific to CP-01 will populate as needed to run the program.
			No concern of over-writing anything here.

		*Fixed/patched, not optimally - Processor Disconnect/Reconnect Issue
			On startup, the data lists are read into the Pro3 program, which in turn distributes the data to various places, including the 4x EISCs pointing to the CP3 processors. When the processors disconnect (appear as offline for whatever reason) it is possible that a program or hardware reset took place, thus it is necessary that the Pro3 re-initialize all of the data points across the EISCs that lost connection.
			Two different issues here:
				1. I previously had MSP symbols on all of the EISC data strings so that at any time I could check the strings in debugger to be sure that the proper data has been sent to a CP3 (e.g. use case, if a display is not responding to commands, i can easily check the data to be sure I'm sending the right stuff). The MSPs would also force the strings to update on EISC socket reconnect. The issue here is that for some processors, that would be the equivalent of updating about 1000 config strings simultaneously, as well as instantiating any objects and running config operations that would be associated with each string. Obv, this taps the thread pool and causes all sorts of failures.
				2. I'm of the thought that if a program can break, the fix to that issue should be made in that program. E.g., if the CP3 processors are getting overdrawn, then a fix should be in the CP3s. However, a few things about the way the C# program was originally constructed makes this very difficult and would require a substantial portion of the program to be rewritten, so I patched the issue in the Pro3. Now on socket reconnect, a module that stores all of the outgoing EISC data is retriggered, with a timed stepper that throttles the thread and RAM requirements on the CP3 side. Thus, the CP3 is still vunerable to the overload issue, I've just ensured that the Pro3 doesn't send data too fast. Not optimal, but it works for now.

		*Resolved, ongoing - Slow load times
			At worst, the program took about 20 minutes to load the data lists, initialize all room modules, and send all pertinent data to the CP3 units. Every step is throttled to just about the fastest possible time.
			I've never seen a 3-Series processor move so goddamn slow. Honestly, why is it so fkn slow? The Pro3 loading the lists pegs processing power for about 10 minutes on boot up while it loads all the lists. I've parsed 7KB/s websites continuously on 2-Series processors, and never pegged the cpu before on bootup sequence. I never figured this out, just rearranged stuff until it was "acceptible" (9 or 10 min boot time as of 7/16/2019), and trust me, I tried about twelve very different ways of doing it. Cedars-Sinai SimLabs employed the same system where a ton of data gets blasted out to 20 different destinations, and it takes about 2 minutes to boot that program.
			I am parsing and repackaging the data twice, which likely adds to the mess, but still not worthy of taking 10 minutes. Made a quick test C# program that loaded and sorted all 500KB of data in about 10 seconds. 
			*gaddammit, should have done it all in C#.
				- Tried removing the Keys from the KV pairs and instead just having values separated by commas, where the S+ code would know the order that the data arrived in, saving it from needing to  < find() > or < findnocase() >  150x per second. This had almost no impact on the processing power during startup. Really thought that would be the one. Ended up discarding these changes, because for that very insignificant time benefit on bootup, this made the Data Lists practically unreadable. 
				- Removed almost all of the extra characters in the Data Lists, and shortened the Keys
				- Removed the < find() > string search for the Header types in each line of data, and replaced it with < atoi() > and added unique integers to each data type.. probably 0 seconds of benefit.
				- Considered moving all file loading logic into the Global modules instead of the Initializer modules, which would save parsing / repacking / sending by 1 degree.
					However, apart from the single string var that feeds all data to the Global modules, 
				- Attempted to replace the Global data arays with NVRAM declarations so that we could skip data loading altogether on startup (unless the data changed), but ran into a brickwall S+ bug that made this impossible.
					*Note - the bug: when declaring nested structures as < NONVOLATILE >, the compiler only calculates the data in the base structure in the NVRAM count, and does not include the nested structures in the NVRAM count. No way of getting around this, and it was way over the hard limit of 4MB anyway. To add, Crestron sounded uninterested in fixing the bug. Can't really blame them.
				- Subdivided the data in the largest lists which reduces the number of operations by a factor of 2.
				- The above issue "Processor Disconnect/Reconnect" would shave about 3 minutes off the total time. Might be in the stars.




		



