#CATEGORY "46" "L3" // Custom

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#help_begin
Feed "ToD$" with a clock symbol

"Cancel" will disable the next upcoming Warning and Trigger.
If Warning is pulsed, then "Cancel" is asserted, the next Trigger will be cancelled.

//future- add "snooze" button

Dont forget to use a NetworkTimeSync symbol!
#help_end

DIGITAL_INPUT 	_SKIP_, 
				Later60, 
				Later15, 
				Earlier15, 
				Earlier60,
				Cancel;
ANALOG_INPUT	InHour,
				InMin,
				InWarnSecs;

STRING_INPUT	ToD$[50];

DIGITAL_OUTPUT	_SKIP_, 
				Warning, 
				Trigger;

STRING_OUTPUT	_SKIP_,
				TrigTime,
				WarnTime;

INTEGER_PARAMETER	WarningTime;

#BEGIN_PARAMETER_PROPERTIES WarningTime
propDefaultValue = 60d;
propList = 	{ 15d , "15 Sec" },
			{ 30d , "30 Sec" },
			{ 60d , "1 Min"  },
			{ 180d, "3 Min"	},
			{ 300d, "5 Min"	},
			{ 900d, "15 Min" };
#END_PARAMETER_PROPERTIES

SIGNED_INTEGER 	iCancel;
INTEGER			iWarnSecs;
STRING 			sTime[20], 
				sWarn[20]; 
LONG_INTEGER 	liTimeEpoc,
				liWarnEpoc;
        



FUNCTION fTime()
{
	LONG_INTEGER Ht, Mt, St, Ht12, Hw, Mw, Sw, Hw12;
	STRING AMPMt[20], AMPMw[20];
	  
      
	Ht = liTimeEpoc / 3600;
	Mt = (liTimeEpoc mod 3600) / 60;
 	St = liTimeEpoc mod 60;

	makestring(sTime, "%02lu%02lu%02lu", Ht, Mt, St);

	if(Ht >= 12) AMPMt = "PM";
	else AMPMt = "AM";
		
	if(Ht = 0 || Ht = 12) Ht12 = 12;
	else Ht12 = Ht mod 12;
	makestring(TrigTime, "%02lu:%02lu %s", Ht12, Mt, AMPMt);
	
	
	Hw = liWarnEpoc / 3600;
	Mw = (liWarnEpoc mod 3600) / 60;
    Sw = liWarnEpoc mod 60;
                                                     
	makestring(sWarn, "%02lu%02lu%02lu", Hw, Mw, Sw);

	if(Hw >= 12) AMPMw = "PM";
	else AMPMw = "AM";
	
	if(Hw = 0 || Hw = 12) Hw12 = 12;
	else Hw12 = Hw mod 12;
    makestring(WarnTime, "%02lu:%02lu %s", Hw12, Mw, AMPMw);


}


CHANGE ToD$
{
	INTEGER I, J;
               
	if(find(sWarn, mid(ToD$,9, 6)) && iCancel = 0)
	{
    	pulse(10, Warning);
	}
         
	if(find(sTime, mid(ToD$, 9, 6)))
	{
    	if(iCancel = 0)	pulse(10, Trigger);
		else iCancel = 0;
	}
}

PUSH Cancel
{
	iCancel = 1;
}

PUSH Later60
{
	liTimeEpoc = (liTimeEpoc + 86400 + 3600) mod 86400;
	liWarnEpoc = (liTimeEpoc + 86400 - iWarnSecs) mod 86400;
	fTime();
}

PUSH Later15
{
	liTimeEpoc = (liTimeEpoc + 86400 + 900) mod 86400;
	liWarnEpoc = (liTimeEpoc + 86400 - iWarnSecs) mod 86400;
	fTime();

}

PUSH Earlier15
{
	liTimeEpoc = (liTimeEpoc + 86400 - 900) mod 86400;
	liWarnEpoc = (liTimeEpoc + 86400 - iWarnSecs) mod 86400;
	fTime();


}
PUSH Earlier60
{
	liTimeEpoc = (liTimeEpoc + 86400 - 3600) mod 86400;
	liWarnEpoc = (liTimeEpoc + 86400 - iWarnSecs) mod 86400;
	fTime();
}

CHANGE InHour
{
	if(InHour >= 0)
	{
		liTimeEpoc = ((InHour mod 24) * 3600) + ((InMin mod 60) * 60);
		liWarnEpoc = (((InHour mod 24) * 3600) + ((InMin mod 60) * 60) + 86400 - iWarnSecs) mod 86400;
		fTime();
	}
}

CHANGE InMin
{
	if(InMin >= 0)
	{
		liTimeEpoc = ((InHour mod 24) * 3600) + ((InMin mod 60) * 60);
		liWarnEpoc = (((InHour mod 24) * 3600) + ((InMin mod 60) * 60) + 86400 - iWarnSecs) mod 86400;
		fTime();
	}
}

CHANGE InWarnSecs
{
	iWarnSecs = InWarnSecs;
	liWarnEpoc = (((InHour mod 24) * 3600) + ((InMin mod 60) * 60) + 86400 - iWarnSecs) mod 86400;
	fTime();

}
      
FUNCTION main()
{
	waitforinitializationcomplete();

	if(InWarnSecs > 0) 	iWarnSecs = InWarnSecs;
	else iWarnSecs = WarningTime;

	if(InHour >= 0 && InMin >= 0)
	{	
		liTimeEpoc = ((InHour mod 24) * 3600) + ((InMin mod 60) * 60);
		liWarnEpoc = (((InHour mod 24) * 3600) + ((InMin mod 60) * 60) + 86400 - iWarnSecs) mod 86400;
		fTime();
	}

}
